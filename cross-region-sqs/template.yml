AWSTemplateFormatVersion: "2010-09-09"

Mappings:
  "123456789012":
    "us-east-1":
      Alias: "E1"

    "us-west-1":
      Alias: "W1"
  

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        Fn::Sub:
          - "${AWS::StackName}-LambdaRole-${RegionAlias}"
          - RegionAlias: !FindInMap [!Ref "AWS::AccountId", !Ref "AWS::Region", Alias]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "sqs:*"
                Resource: "ars:aws:sqs:*:*:*"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
            print("Received event:", event)

      Description: "Test Lambda"
      FunctionName: !Sub "${AWS::StackName}-Lambda"
      Handler: "index.handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: "python3.11"

  LambdaDLQFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os

          FOREGION = os.environ['FAILOVER_REGION']
          SQS = os.environ['SQS']

          def handler(event, context):
            sqs = boto3.client('sqs', region_name=FOREGION)
            sqs.get_queue_url(QueueName=SQS)
            sqs.send_message(QueueUrl=qurl['QueueUrl'], MessageBody=event)

      Description: "Lambda for the DLQ. Passes messages to the other region"
      FunctionName: !Sub "${AWS::StackName}-Lambda"
      Handler: "index.handler"
      Role: !GetAtt LambdaRole.Arn
      Runtime: "python3.11"

  SQS:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !sub "${AWS::StackName}-Queue"
      MessageRetentionPeriod: 3600
      VisiblityTimeout: 30
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SQSDLQ.Arn
        maxReceiveCount: 3

  SQSEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt SQS.Arn
      FunctionName: !GetAtt LambdaFunction.Arn
      FunctionResponseTypes:
        - "ReportBatchItemFailures"

  SQSDLQ:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !sub "${AWS::StackName}-QueueDLQ"

  SQSDLQEventSourceMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt SQSDLQ.Arn
      FunctionName: !GetAtt LambdaDLQFunction.Arn
      FunctionResponseTypes:
        - "ReportBatchItemFailures"

Outputs:
  SQS:
    Value: !Ref SQS
  SQSDLQ:
    Value: !Ref SQSDLQ
