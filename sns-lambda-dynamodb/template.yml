AWSTemplateFormatVersion: "2010-09-09"
Description: "A Lambda with access to a DynamoDB subscribed to an SNS Topic."

Resources:
  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      TopicName: !Sub "${AWS::StackName}-SNSTopic"
      Subscription:
        - Endpoint: !GetAtt Lambda.Arn
          Protocol: "lambda"

  SNSTopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Id: !Sub "${AWS::StackName}-TopicPolicy"
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowCloudWatchAlarms"
            Action: "sns:Publish"
            Effect: "Allow"
            Principal:
              AWS: "*"
            Resource: !Ref SNSTopic

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-Role"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:Describe*"
                  - "dynamodb:GetItem*"
                  - "dynamodb:List*"
                  - "dynamodb:PutItem*"
                  - "dynamodb:Query"
                  - "dynamodb:Scan*"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt Table.Arn
                  - !Join ["/", [!GetAtt Table.Arn, "index", "*"]]

  Lambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          cw = boto3.client('cloudwatch')
          dynamodb = boto3.client('dynamodb')
          region = os.environ['AWS_REGION']

          def handler(event, context):
            print(event)

      Description: "Sample lambda to pair SNS topic with Lambda"
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      FunctionName: !Sub "${AWS::StackName}-Lambda"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: "python3.8"
      Timeout: 30

  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref Lambda
      Principal: "events.amazonaws.com"
      SourceArn: !Ref SNSTopic

  Table:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${AWS::StackName}-Table"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
        - AttributeName: "address"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
        - AttributeName: "address"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: "ByAddress"
          KeySchema:
            - AttributeName: "address"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThrougput:
            ReadCapacityUnits: 10
            WriteCapacityUnits: 10
      ProvisionedThrougput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

Outputs:
  Lambda:
    Value: !Ref Lambda
