AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploy this to the account where you want to perform cross-account access."

Parameters:
  RoleArn:
    Type: String
    Description: "Enter Account 1 Role Arn"

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-Role"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sts:AssumeRole"
                Resource: !Ref RoleArn

  Lambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          import json

          def assume_role(role_arn):
            sts = boto3.client('sts')
            role = sts.assume_role(RoleArn=role, RoleSessionName='assume-role')

            return boto3.client('cloudwatch',
              aws_access_key_id=role['Credentials']['AccessKeyId'],
              aws_secret_access_key=role['Credentials']['SecretAccessKey'],
              aws_session_token=role['Credentials']['SessionToken'])

          def handler(event, context):
            role_arn = os.environ['ROLE_ARN']
            cw = assume_role(role_arn)
            cw.delete_alarms(AlarmNames=['Alarm1', 'Alarm2'])

      Description: "Assumes role in account 1"
      Environment:
        Variables:
          ROLE_ARN: !Ref RoleArn
      FunctionName: !Sub "${AWS::StackName}-Lambda"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt LambdaRole.Arn
      Runtime: "python3.8"
      Timeout: 30
