AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  VPC:
    Type: "AWS::EC2::VPC"
    Properties: 
      CidrBlock: "{{ vpc.cidr }}"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags: 
       - Key: "Name"
         Value: "{{ vpc.name }}"

  # Create Internet Gateway for all public subnets in this VPC
  InternetGateway: 
    Type: "AWS::EC2::InternetGateway"
  VPCGatewayAttachment: 
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "{{ vpc.public_route_table.name }}"
  PublicInternetRoute: 
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

{%- for az in vpc.availability_zones %}

  # ----- {{ az.resource_name }} -----

  # Create a NAT Gateway
  {{ az.resource_name}}NatGatewayElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  {{ az.resource_name}}NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt {{ az.resource_name}}NatGatewayElasticIP.AllocationId
      SubnetId: !Ref {{ az.nat_gateway.subnet }}
  {{ az.resource_name}}PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "{{ az.private_route_table.name }}"
  {{ az.resource_name}}PrivateInternetRoute:
    Type: "AWS::EC2::Route"
    Properties: 
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref {{ az.resource_name}}NatGateway
      RouteTableId: !Ref {{ az.resource_name}}PrivateRouteTable

  # Subnets
{%- for subnet in az.subnets %}
  {{ subnet.resource_name }}:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "{{ az.name }}"
      VpcId: !Ref VPC
      CidrBlock: "{{ subnet.cidr }}"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: "{{ subnet.name }}"

  {%- if subnet.public %}
  {{ subnet.resource_name }}Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref {{ subnet.resource_name }}
  {%- else %}
  {{ subnet.resource_name }}Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref {{ az.resource_name}}PrivateRouteTable
      SubnetId: !Ref {{ subnet.resource_name }}
  {%- endif %}
{%- endfor %}

{%- endfor %}


  # Some default security groups to allow SSH and HTTP/S access
  PrivateSSHSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupName: "Private SSH"
      GroupDescription: "SSH from within VPC"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "{{ vpc.cidr }}"
  PrivateHTTPSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupName: "Private HTTPS"
      GroupDescription: "Private HTTP/S Traffic from within VPC"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "{{ vpc.cidr }}"
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "{{ vpc.cidr }}"
  PublicHTTPSecurityGroup: 
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupName: "Public HTTPS"
      GroupDescription: "Public HTTP/S Access"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: "0.0.0.0/0"
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: "0.0.0.0/0"

Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref VPC
  PublicSubnetIds:
    Description: List of Public Subnet Ids
    Value: !Join
      - ','
      - {%- for az in vpc.availability_zones %}
        {%- for subnet in az.subnets %}
        {%- if subnet.public %}
        - !Ref {{ subnet.resource_name }}
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
  PrivateSubnetIds:
    Description: List of Private Subnet Ids
    Value: !Join
      - ','
      - {%- for az in vpc.availability_zones %}
        {%- for subnet in az.subnets %}
        {%- if not subnet.public %}
        - !Ref {{ subnet.resource_name }}
        {%- endif %}
        {%- endfor %}
        {%- endfor %}
  PrivateHTTPSecurityGroupId:
    Description: Security Group Id for Private HTTP/S
    Value: !Ref PrivateHTTPSecurityGroup
  PublicHTTPSecurityGroupId:
    Description: Security Group Id for Public HTTP/S
    Value: !Ref PublicHTTPSecurityGroup
  PrivateSSHSecurityGroupId:
    Description: Security Group Id for SSH access from within VPC
    Value: !Ref PrivateSSHSecurityGroup
